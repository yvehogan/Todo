{"version":3,"sources":["components/Form.js","components/AddTodo.jsx","components/Todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","inputText","todoList","setTodoList","inputRef","ref","value","onChange","e","console","log","target","title","type","placeholder","onClick","preventDefault","text","completed","id","Date","getTime","AddTodo","todo","setEditTodo","className","map","item","completeHandler","Todo","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAuCeA,EAnCF,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,aAAcC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAiB5D,OAEJ,iCACI,6CACF,uBAAOC,IAAKD,EAAUE,MAAOL,EAC7BM,SApBoB,SAACC,GACnBC,QAAQC,IAAIF,EAAEG,OAAOL,OACrBN,EAAaQ,EAAEG,OAAOL,QAmBxBM,MAAM,QACNC,KAAK,OACLC,YAAY,SAGZ,wBAAQC,QAlBW,SAACP,GAClBA,EAAEQ,iBACFb,EAAY,GAAD,mBACND,GADM,CACI,CAACe,KAAMhB,EAAWiB,WAAW,EAAOC,IAAG,IAAIC,MAAOC,cAEjErB,EAAa,KAaf,sB,OCEasB,EA9BC,SAAC,GAAyD,IAAvDL,EAAsD,EAAtDA,KAAOd,EAA+C,EAA/CA,YAAaoB,EAAkC,EAAlCA,KAAMrB,EAA4B,EAA5BA,SAA4B,EAAlBsB,YAqBnD,OACI,qBAAKC,UAAU,UAAf,SACA,qBAAIA,UAAU,eAAd,UAA+BR,EAC/B,wBAAQF,QAAS,kBAtBG,SAACQ,GACrBpB,EACID,EAASwB,KAAI,SAACC,GACd,OAAGA,EAAKR,KAAOI,EAAKJ,GACT,2BACAQ,GADP,IACaT,WAAYS,EAAKT,YAE3BS,MAeYC,CAAgBL,IAAOE,UAAU,kBAAxD,sBACA,wBAAQA,UAAU,eAAlB,wBCXOI,EAfF,SAAC,GAA+B,IAA7B3B,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAE1B,OADEM,QAAQC,IAAIR,GAEV,qBAAKuB,UAAU,iBAAf,SACI,oBAAIA,UAAU,YAAd,SACDvB,EAASwB,KAAI,SAAAH,GAAI,OACd,cAAC,EAAD,CAASpB,YAAaA,EACtBD,SAAUA,EAERe,KAAMM,EAAKN,MADPM,EAAKJ,YCaNW,MAnBf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACN9B,EADM,KACKD,EADL,OAEmB+B,mBAAS,IAF5B,mBAEN7B,EAFM,KAEIC,EAFJ,KAIb,OACE,sBAAKsB,UAAU,MAAf,UAEA,cAAC,EAAD,CAAMvB,SAAUA,EAChBC,YAAaA,EACbH,aAAcA,EACdC,UAAYA,IAEZ,cAAC,EAAD,CAAMC,SAAUA,EACVC,YAAaA,QCNR6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4a20c727.chunk.js","sourcesContent":["import React, { useRef }  from 'react';\r\nimport '../Form.css';\r\n\r\n\r\nconst Form = ({ setInputText, inputText, todoList, setTodoList, inputRef }) => {\r\n  //Targets the input value\r\n  const inputHandler =(e) => {\r\n    console.log(e.target.value);\r\n    setInputText(e.target.value);\r\n  };\r\n  \r\n  //it sets the click function on the button, prevents reload and had to use new date to set id, because react won't run without a unique key\r\n  // ...todoList spreads the input in an array\r\n\r\n  const submitTodo = (e) => {\r\n    e.preventDefault();\r\n    setTodoList([\r\n      ...todoList, {text: inputText, completed: false, id:new Date().getTime()}\r\n    ]);\r\n    setInputText(\"\");\r\n  };\r\n    return (\r\n\r\n<form>\r\n    <h2> TO-DO List</h2>\r\n  <input ref={inputRef} value={inputText}\r\n  onChange={inputHandler}\r\n  title=\"input\"\r\n  type='text'\r\n  placeholder='Task'\r\n  />\r\n  \r\n  <button onClick={submitTodo}>Save</button>\r\n  </form>\r\n      \r\n    ); \r\n    \r\n}\r\n\r\nexport default Form;","import { useRef } from 'react';\r\nimport '../Form.css';\r\n\r\n\r\nconst AddTodo = ({ text,  setTodoList, todo, todoList, setEditTodo }) => {\r\n\r\n    const completeHandler = (todo) =>{\r\n        setTodoList(\r\n            todoList.map((item) =>{\r\n            if(item.id === todo.id){\r\n                return {\r\n                    ...item, completed: !item.completed};\r\n            } \r\n            return item;\r\n        })\r\n        );\r\n    };\r\n\r\n    //trying to use useRef and focus to implement edit button\r\n    \r\n    // const editHandler = useRef(null);\r\n    // const handleClick {\r\n        // inputEl.current.focus=handleClick;\r\n    // };\r\n\r\n    return (\r\n        <div className=\"addTodo\">\r\n        <li className=\"addTodo-item\">{ text }\r\n        <button onClick={() => completeHandler(todo)} className=\"complete-button\">Complete</button>\r\n        <button className=\"edit-buttton\">Edit</button></li>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\nimport AddTodo from './AddTodo';\r\n\r\nconst Todo = ({ todoList, setTodoList }) => {\r\n  console.log(todoList)\r\nreturn ( \r\n    <div className=\"todo-container\">\r\n        <ul className=\"todo-list\">\r\n      {todoList.map(todo => (\r\n          <AddTodo setTodoList={setTodoList}\r\n          todoList={todoList}\r\n           key={todo.id}\r\n            text={todo.text}/>\r\n      ))}\r\n        </ul>\r\n</div>\r\n);\r\n};\r\nexport default Todo;\r\n ","import React, { useState } from 'react';\n\nimport Form from './components/Form';\nimport Todo from './components/Todo';\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todoList, setTodoList] = useState([]);\n\n  return (\n    <div className=\"App\">\n   \n    <Form todoList={todoList} \n    setTodoList={setTodoList} \n    setInputText={setInputText}\n    inputText ={inputText} />\n    \n    <Todo todoList={todoList}\n          setTodoList={setTodoList}/>\n    \n    </div>\n  );\n}\n\nexport default App; \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}